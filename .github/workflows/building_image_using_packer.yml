name: "Build Image using Packer and Continuous Deployment"
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Starting a Node Server with MySQL
        uses: ./.github/actions/integration_tests
        with:
          mysql_root_password: ${{secrets.MYSQL_PASSWORD}}
          mysql_username: ${{secrets.MYSQL_USERNAME}}
          mysql_database: ${{vars.DATABASE_NAME}}
          projectId: ${{secrets.PROJECTID}}
          gcloud_logging_enabled: ${{vars.GCLOUD_LOGGING_ENABLED}}
        env:
          DATABASE_NAME: ${{vars.DATABASE_NAME}}
  build_image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Authenticate Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
      - name: "Use gcloud CLI"
        run: "gcloud info"
      - name: Create a zip
        run: tar -czvf webapp.tar.gz . || true
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
      - name: Initializing Packer
        run: packer init ./packer/main.pkr.hcl
      - name: Build Packer
        id: packer_build
        run: |
          packer_output=$(packer build -var "project_id=${{ vars.PROJECT_ID }}" -var "ssh_username=${{ vars.SSH_USERNAME }}" -var "zone=${{ vars.ZONE }}" ./packer/main.pkr.hcl)
          image_name=$(echo "$packer_output" | awk -F ': ' 'END {print $NF}')
          echo "Packer output: $packer_output"
          echo "Image Name: $image_name"
          echo "::set-output name=image_name::$image_name"
        env:
          project_id: ${{vars.PROJECT_ID}}
          ssh_username: ${{vars.SSH_USERNAME}}
          zone: ${{vars.ZONE}}
      - name: Print Image ID
        run: |
          echo "Image ID from Packer step: ${{ steps.packer_build.outputs.image_name }}"
      - name: Creating a Instance Template
        run: sh scripts/create_instance_template.sh ${{vars.INSTANCE_TEMPLATE_NAME}} ${{vars.PROJECT_ID}} ${{vars.SUBNET}} ${{vars.REGION}} "${{vars.TAGS}}" ${{vars.DATABASE_NAME}} '${{secrets.DATABASE_PASSWORD}}' ${{secrets.DATABASE_IP}} ${{vars.PUB_SUB}} ${{ steps.packer_build.outputs.image_name }} ${{vars.CRYPTO_KEY_NAME}} ${{vars.KEY_RING_NAME}}
        env:
          INSTANCE_TEMPLATE_NAME: ${{ vars.INSTANCE_TEMPLATE_NAME }}
          project_id: ${{vars.PROJECT_ID}}
          SUBNET: ${{vars.SUBNET}}
          REGION: ${{vars.REGION}}
          TAGS: ${{vars.TAGS}}
          DATABASE_NAME: ${{vars.DATABASE_NAME}}
          DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          DATABASE_IP: ${{secrets.DATABASE_IP}}
          PUB_SUB: ${{vars.PUB_SUB}}
          CRYPTO_KEY_NAME: ${{vars.CRYPTO_KEY_NAME}}
          KEY_RING_NAME: ${{vars.KEY_RING_NAME}}
      - name: Setting new instance template to the group
        run: gcloud compute instance-groups managed set-instance-template ${{vars.INSTANCE_GROUPS}} --template=projects/dev-csye-6225/regions/${{vars.REGION}}/instanceTemplates/${{vars.INSTANCE_TEMPLATE_NAME}} --region=${{vars.REGION}}
        env:
          INSTANCE_GROUPS: ${{vars.INSTANCE_GROUPS}}
          REGION: ${{vars.REGION}}
          INSTANCE_TEMPLATE_NAME: ${{ vars.INSTANCE_TEMPLATE_NAME }}
      - name: Update all Instances
        run: gcloud compute instance-groups managed rolling-action start-update ${{vars.INSTANCE_GROUPS}} --version template=projects/dev-csye-6225/regions/${{vars.REGION}}/instanceTemplates/${{vars.INSTANCE_TEMPLATE_NAME}} --region ${{vars.REGION}} --project ${{vars.PROJECT_ID}}
        env:
          INSTANCE_GROUPS: ${{vars.INSTANCE_GROUPS}}
          project_id: ${{vars.PROJECT_ID}}
          REGION: ${{vars.REGION}}
          INSTANCE_TEMPLATE_NAME: ${{ vars.INSTANCE_TEMPLATE_NAME }}
      - name: Waiting till rolling updates
        run: gcloud compute instance-groups managed wait-until ${{vars.INSTANCE_GROUPS}} --version-target-reached --region=${{vars.REGION}}
        env:
          INSTANCE_GROUPS: ${{vars.INSTANCE_GROUPS}}
          REGION: ${{vars.REGION}}
